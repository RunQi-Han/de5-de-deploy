# GH Action to deploy a Dash production app to Dash Enterprise on a schedule based trigger
name: Deploy App to Production on Schedule

# on:
#   schedule:
#     # Run the workflow every day at 2:30 PM UTC (9:30 AM EST)
#     - cron: '30 14 * * *'

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check for required secrets
        run: |
          if [ -z "${{ secrets.DE_HOST }}" ]; then
            echo "Error: DE_HOST secret is not set. Please set this at GH Org level."
            exit 1
          fi
          if [ -z "${{ secrets.DASH_DEPLOY_USERNAME }}" ]; then
            echo "Error: DASH_DEPLOY_USERNAME secret is not set. Please set this at GH Org level."
            exit 1
          fi
          if [ -z "${{ secrets.DASH_DEPLOY_PASSWORD }}" ]; then
            echo "Error: DASH_DEPLOY_PASSWORD secret is not set. Please set this at GH Org level."
            exit 1
          fi
          if [ -z "${{ secrets.DE_PYTHON_VERSION }}" ]; then
            echo "Error: DE_PYTHON_VERSION secret is not set. Please set this at GH Org level."
            exit 1
          fi
          if [ -z "${{ secrets.GH_REPO_ACCESS_TOKEN }}" ]; then
            echo "Error: GH_REPO_ACCESS_TOKEN secret is not set. Please set this at GH Repo level."
            exit 1
          fi
          if [ -z "${{ secrets.APP_NAME }}" ]; then
            echo "Error: APP_NAME secret is not set. Please set this at GH Repo level."
          fi
          if [ -z "${{ secrets.DE_CLIENT_VERSION }}" ]; then
            echo "Warning: DE_CLIENT_VERSION secret is not set. Will install latest version by default."
          fi
  install-de-client:
    # Install the de-client package. Needed to interact with Dash Enterprise.
    runs-on: self-hosted
    needs: [check-secrets]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
            python-version: ${{ secrets.DE_PYTHON_VERSION }}
            cache: 'pip'
      - name: Install de-client
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -z "${{ secrets.DE_CLIENT_VERSION }}" ]; then
            # If no version is specified, install the latest version
            pip install de-client --extra-index-url=https://${{ secrets.DE_HOST }}/packages
          else
            # Install the specified version
            pip install de-client==${{ secrets.DE_CLIENT_VERSION }} --extra-index-url=https://${{ secrets.DE_HOST }}/packages
          fi
  create-app-if-does-not-exist:
    runs-on: self-hosted
    needs: [check-secrets, install-de-client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
            python-version: ${{ secrets.DE_PYTHON_VERSION }}
            cache: 'pip'
      - name: Create app if it does not exist
        shell: bash
        run: |
          # Create the app if it does not already exist
          exists=$(de --no-keyfile apps exists -n $APP_NAME)
          if [[ $exists == *"App [$APP_NAME] does not exist on [$DE_HOST]."* ]]; then
            de --no-keyfile apps create -n $APP_NAME
          fi
        env:
          DASH_ENTERPRISE_HOST: ${{ secrets.DE_HOST }}
          DASH_ENTERPRISE_PASSWORD: ${{ secrets.DASH_DEPLOY_PASSWORD }}
          DASH_ENTERPRISE_USERNAME: ${{ secrets.DASH_DEPLOY_USERNAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
  generate-details-link:
    runs-on: self-hosted
    needs: [check-secrets, install-de-client, create-app-if-does-not-exist]
    steps:
      - name: Generate details link as commit status
        shell: bash
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json"\
            -H "Authorization: Bearer ${{secrets.GH_REPO_ACCESS_TOKEN}}"\
            -H "X-GitHub-Api-Version: 2022-11-28"\
            https://api.github.com/repos/${{ github.repository }}/statuses/${{github.event.pull_request.head.sha || github.sha}}\
            -d '{"state":"success","target_url":"https://${{ secrets.DE_HOST }}/apps/${{ secrets.APP_NAME }}","description":"App manager ready!","context":"deploy/${{ secrets.APP_NAME }}"}'
  inject-code-and-deploy:
    runs-on: self-hosted
    needs: [check-secrets, install-de-client, create-app-if-does-not-exist, generate-details-link]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
            python-version: ${{ secrets.DE_PYTHON_VERSION }}
            cache: 'pip'
      - name: Inject code and deploy
        shell: bash
        run: |
          de --no-keyfile deploy --name ${{ secrets.APP_NAME }} --message "Deployed commit: $GITHUB_SHA" -y
        env:
          DASH_ENTERPRISE_HOST: ${{ secrets.DE_HOST }}
          DASH_ENTERPRISE_PASSWORD: ${{ secrets.DASH_DEPLOY_PASSWORD }}
          DASH_ENTERPRISE_USERNAME: ${{ secrets.DASH_DEPLOY_USERNAME }}
